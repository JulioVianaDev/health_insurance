# -*- coding: utf-8 -*-
"""plano_saude.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M3E_HrATaQBJAIFzFuBxMU5tA3nqJ_VJ

#Colentando Dados de Estados Brasileiros
"""

import  pandas as pd #Biblioteca de tratamento e leitura de dados
estados = pd.read_csv('estados_brasileiros.csv', sep = ';', encoding = 'latin=1'  )

estados.head()

"""#Coletando dado dos clientes"""

clients = pd.read_excel('dados_clientes.xlsx')
clients.head()

"""#Coletando a idade dos clientes"""

age = pd.read_csv('idade_clientes.csv', sep=';',encoding='latin-1')
age.head()

"""#Preparação de dados
## É a etapa aonde os dados são limpos e se tornam aptos a analise. Essa etapa tem como objetivo de reduzir descrepancias, evitar valores nulos  indicar anomalias e preencher lacunas,

#Analizando  as variaveis das base de dados
"""

clients.info()

clients.describe()

estados.info()

age.info()

age.describe()

"""# Analisando dados ausentes"""

#verificando os valores nulos da base
estados.isna().sum()

clients.isna().sum()

age.isna().sum()

#Verificando os valores registros de valores  nulos
clients.loc[clients['peso'].isnull()]

"""#eliminando dados ausentes"""

clients.dropna(subset=['peso'],inplace=True) #para eliminar o registro. implace = true siginifica que quer alterar aquele frame

clients.isna().sum()

clients.count()

"""###alterando dados  por outras medidas"""

clients.describe

# realizando a média e  mediana da variavel peso
media=clients.peso.mean()
mediana =clients.peso.median()

print(f"O valor das medias dos pesos é {media} \n o valor da mediana é {mediana}")

round(media,2) #arredondamento da variavel media para 2 casas pós virgula

#preencher valores auzentes pela média
clients.peso.fillna(round(media,2),inplace=True)

clients.isna().sum() #verificando se tem algum valor null

clients.count()

"""#Substituindo variavel categorica
###Quando temos uma variavel categorica o que fazemos é substituir pela variavle mais usada
"""

print(estados.pais.value_counts())

estados.pais.fillna('Brasil',inplace=True)

estados.isna().sum()

"""#Analizando a  distribuição de dados"""

import matplotlib.pyplot as plt

clients.hist(column='peso',figsize=(15,7))
plt.show()

clients.hist(column='peso',figsize=(15,7),bins=100)

clients.hist(column='colesterol',figsize=(15,7),bins=100)

#Criando um identificador para a váriavel genero
from sklearn.preprocessing import LabelEncoder

LE = LabelEncoder()
clients['genero_number'] = LE.fit_transform(clients['genero'])

clients

clients.hist(column='genero_number',figsize=(15,7), bins=3)

"""#junções de dados coletados"""

estados[:5]

clients[:5]

clients_estados = pd.merge(clients,estados,on='id_estado')
clients_estados.sort_values('id_cliente')

#realiza  junção entre  clientes e  idades
base_completa = pd.merge(clients_estados,age,on='id_cliente').sort_values('id_cliente')

base_completa

base_completa.reset_index(drop=True)

"""#Organizando a base de dados
###podemos realizar varias alterações na base de dados a fim de melhorar o entendimento e disposição das colunas
"""

#Alterando nome das colunas
base_completa.rename(columns={'id_cliente': 'cod_cliente', 'genero_number':'cod_genero'},  inplace=True)
base_completa

#Alterando as linhas da variavel sigla_estado para maiusculo
base_completa.sigla_estado.str.upper()

#inserindo a alteração realizada
base_completa['sigla_estado']= base_completa.sigla_estado.str.upper()

"""#Alterando disposição das colunas do arquivo de dados
###Vamos  alterar as disposições das colunas no nosso conjunto de dados a fim de facilitar a visualização

"""

base_completa[['cod_cliente','genero','idade', 'peso','colesterol', 'id_estado','estado','sigla_estado','pais']]

base_completa = base_completa[['cod_cliente','genero','idade','peso','colesterol','id_estado' ,'estado','sigla_estado','pais']].reset_index(drop=True)

base_completa[:5]

"""#Analise de dado

##É a parte  da etapa aonde selecionamos os algoritimos de machine learning que serão inseridos para alcançar o resultado
##Para esse trabalho, vamos realizar um agrupamento  de pessoas com base no colesterol,peso e idade das pessoas

#Aplicando o metodo cotovelo
###Vamos inicializar o número de clusters necessarios para  realizaro agrupamentp
"""

from sklearn.cluster import KMeans

def calcular_wcss(dados_cliente):
  wcss= []
  for k in range(1,11):
    kmeans = KMeans(n_clusters= k)
    kmeans.fit(X = dados_cliente)
    wcss.append(kmeans.inertia_)
  return wcss
  wcss.show()

dados_cliente = base_completa [['peso','colesterol']]
dados_cliente.head()

wcss_clientes = calcular_wcss(dados_cliente)

wcss_clientes

#Vizualizando os dados  obtidos por WCSS
for i in range(len(wcss_clientes)):
  print(f'O cluster{i} possui o valor wcss de {wcss_clientes[i]}')

"""#Visualizando o Gráfico cotovelo"""

import plotly.express as px #grafico de pixels
import plotly.offline as py
import plotly.graph_objects as go #Para criação e caracterização de graficos

grafico_wcss= px.line(x= range(1,11),y=wcss_clientes)
fig = go.Figure(grafico_wcss)
fig.update_layout(title='Calculo de wcss',
                  xaxis_title='Numero de clusters',
                  yaxis_title = 'Valor do WCSS',
                  template = 'plotly_white'
                  )
fig.show()

kmeans_clientes = KMeans(n_clusters=4, random_state=0)
base_completa['cluster'] = kmeans_clientes.fit_predict(dados_cliente)

base_completa

"""#Calculando os centroides dos clusters"""

centroide_clusters = kmeans_clientes.cluster_centers_
centroide_clusters

dados_cliente

"""#Aqui temos os centroides dos 3 cluster de acordo com os atributos. Nesse exemplo vemos os centroides  de 'peso' 'colesterol' 'idade' respectivamente"""

grafico = px.scatter(x=base_completa['peso'], y= base_completa['colesterol'],color= base_completa['cluster'])
grafico_centroide = px.scatter(x= centroide_clusters[:,0], y= centroide_clusters[:,1], size=[7,7,7,7])
grafico_final =go.Figure(data = grafico.data + grafico_centroide.data)
grafico_final.show()

"""#Vizualizando e alterando o layout do grafico"""

grafico = px.scatter(x= base_completa['colesterol'], y= base_completa['peso'],color= base_completa['cluster']
                     )
fig = go.Figure(grafico)
fig.update_layout(title = 'Analise de cluster ', xaxis_title="Colesterol",yaxis_title= 'peso')
fig.show()

"""#Criando funçoes para Gerar graficos"""

def plotar_grafico(x,y,x_label,y_label):
  grafico =px.scatter(x=x,y=y,color=base_completa['cluster'])
  fig = go.Figure(grafico)

  fig.update_layout(title='Analise de Clusters',xaxis_title= x_label,yaxis_title=y_label,)
  fig.show()

plotar_grafico(base_completa['colesterol'],base_completa['peso'],'colesterol','peso')

plotar_grafico(base_completa['peso'],base_completa['colesterol'],'peso','colesterol')

plotar_grafico(base_completa['peso'],base_completa['idade'],'peso','idade(x= centroide_clusters[:,0], y= centroide_clusters[:,1]')

"""#Segmentando cliente em
###alto risco= colesterol alto
###medio risco= colesterol semialto
###baixo risco=colesterol normal
"""

x = 'colesterol'
y = 'peso'

plotar_grafico(base_completa[x], base_completa[y],x,y)

clusters_clientes = base_completa

#seguimentando os clientes baseados na analise dos clusters
clusters_clientes.loc[clusters_clientes['cluster']==0, 'nome_cluster'] = 'Risco Alto'
clusters_clientes.loc[clusters_clientes['cluster']==2,'nome_cluster'] = 'Risco moderado alto' 
clusters_clientes.loc[clusters_clientes['cluster']==1,'nome_cluster'] = 'Risco moderado baixo'
clusters_clientes.loc[clusters_clientes['cluster']==3,'nome_cluster' ]= 'Baixo risco'

clusters_clientes

"""#Analise dos clusters Criados"""

#Verifica os valores de idade de todos os clusters
clusters_clientes.groupby('nome_cluster')['colesterol'].describe()

#Verifica os valores de estado por cluster
clusters_clientes.groupby('nome_cluster')['estado'].describe( )

clusters_clientes.query('nome_cluster == "Alto risco "& estado == "Mato Grosso do Sul   "')

clusters_clientes.groupby(['nome_cluster','genero'])['peso'].describe(  )

"""#Exportando dados"""

clusters_clientes.to_csv('classificacao_clientes.csv',sep = ';', encoding = 'latin1')